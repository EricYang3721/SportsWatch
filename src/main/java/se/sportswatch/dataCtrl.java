package se.sportswatch;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import se.sportswatch.Models.*;
import se.sportswatch.Repositories.TeamRepository;
import se.sportswatch.Repositories.UserRepository; 

@Controller    // This means that this class is a Controller
@RequestMapping(path="/user") // This means URL's start with /demo (after Application path)
public class dataCtrl {
	@Autowired // This means to get the bean called userRepository
	           // Which is auto-generated by Spring, we will use it to handle the data
	private UserRepository userRepository;
	
	@Autowired
	private TeamRepository teamRepository;
	// @GetMapping(path="/add") // Map ONLY GET Requests
	// public @ResponseBody String addNewUser (@RequestParam String name
	// 		, @RequestParam String email) {
	// 	// @ResponseBody means the returned String is the response, not a view name
	// 	// @RequestParam means it is a parameter from the GET or POST request
		
	// 	User n = new User();
	// 	n.setName(name);
	// 	n.setEmail(email);
	// 	userRepository.save(n);
	// 	return "Saved";
	// }
	
	// @GetMapping(path="/all")
	// public @ResponseBody Iterable<User> getAllUsers() {
	// 	// This returns a JSON or XML with the users
	// 	return userRepository.findAll();
	// }
	@GetMapping(path = "/allTeam")
    public @ResponseBody Iterable<Team> getAll() {
        return teamRepository.findAll();
    }

    @GetMapping(path = "/allUser")
    public @ResponseBody Iterable<User> getAllUser() {
        return userRepository.findAll();
    }

    @GetMapping(path="/addTeam") // Map ONLY GET Requests
	public @ResponseBody String addNewTeam (@RequestParam String teamName
			, @RequestParam String teamAbbreviation) {
		// @ResponseBody means the returned String is the response, not a view name
		// @RequestParam means it is a parameter from the GET or POST request
        
        Team n= new Team();
        n.setName(teamName);
        n.setAbbreviation(teamAbbreviation);
        teamRepository.save(n);
		return "Saved";
    }
    
    @GetMapping(path="/addUser") // Map ONLY GET Requests
	public @ResponseBody String addNewTeam (@RequestParam String userName) {
		// @ResponseBody means the returned String is the response, not a view name
		// @RequestParam means it is a parameter from the GET or POST request
        
        User n= new User();
        n.setName(userName);
        userRepository.save(n);
		return "Saved";
	}
}