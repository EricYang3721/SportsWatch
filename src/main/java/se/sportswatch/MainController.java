package se.sportswatch;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.*;
import se.sportswatch.Models.*;
import se.sportswatch.Repositories.*;
// import org.springframework.social.facebook.api.Facebook;
// import org.springframework.social.facebook.api.PagedList;
// import org.springframework.social.facebook.api.Post;
// import org.springframework.social.facebook.api.User;
// import org.springframework.ui.Model;
// import org.springframework.beans.factory.annotation.Autowired;
// import org.springframework.social.connect.ConnectionRepository;
// import org.springframework.web.bind.annotation.RequestMapping;
// import org.springframework.web.bind.annotation.RequestMethod;
import java.util.*;
import java.io.IOException;
import java.util.stream.Collectors;

@Controller
public class MainController {

    @Autowired // This means to get the bean called userRepository    
    private UserRepository userRepository;// Which is auto-generated by Spring, we will use it to handle the data

    @Autowired
    private TeamRepository teamRepository;

    // List<Team> allTeams = new LinkedList<>();
    // HashMap<String, Team> map = new HashMap<>();
    // ArrayList<String> selected = new ArrayList<>();
    // @RequestMapping(value="/")
    @GetMapping("/")
    public String renderIndex(Model model){
        // for(String st : selected){
        //     System.out.println(st);
        // }
        // model.addAttribute("selected", selected);
        User usr = userRepository.findByName("Jack");
        int[] teams = usr.getFavteams();
        Team[] selTeams = new Team[teams.length];

        for(int i=0; i<teams.length; i++){
            selTeams[i] = teamRepository.findById(teams[i]);
        }
        model.addAttribute("user1", usr);
        model.addAttribute("teams", selTeams);

        return "index";
    }


    // @GetMapping("/selectFavTeam")
    // public String selectFavTeam(){
    //     return "selectFavTeam";
    //  }
    
     @GetMapping("/selectFavTeam")
     public String teamForm(Model model){
        // if(!map.containsKey("WW")){
        //     Team WW = new Team("Washington Wizards (WW)" , "WW");
        //     allTeams.add(WW);
        //     map.put("WW", WW);
        //     Team WH = new Team("Miami Heat (MH)", "MH");
        //     map.put("WH", WH);
        //     allTeams.add(WH);
        //     Team LAC = new Team("Los Angeles Clippers (LAC)", "LAC");
        //     map.put("LAC", LAC);
        //     allTeams.add(LAC);  
            
        // }        
        // model.addAttribute("allTeams", allTeams); 
        // model.addAttribute("map",map);  
        model.addAttribute("teams", teamRepository.findAll());
        
        return "selectFavTeam";
     }

     @PostMapping("/selectFavTeam") 
     public String teamSubmit(@RequestParam int[] selTeams)throws IOException{
        // System.out.println(jsonString);
        // String[] res = jsonString.split("&");
        
        userRepository.deleteAll();
        for(int t : selTeams){
            System.out.println(t);
        }        
        User user1 = new User();
        user1.setName("Jack");
        user1.setFavteams(selTeams);
        userRepository.save(user1);


        // for(String str:res) {
		// 	str = str.split("=")[1];
        //     // System.out.println(str);
        //     String newstr = "";
		// 	for(char c : str.toCharArray()) {
		// 		if(Character.isLetter(c)) newstr +=c;
		// 		else newstr= newstr + ' ';				
		// 	}
		// 	str=newstr;
		// 	System.out.println(str);
        //     if(!selected.contains(str))selected.add(str);
              

        // User n = new User();
        // n.setFavteams(selected);
        // userRepository.save(n);

        return "redirect:";
     }

    // Requests below are using for debug
    // @GetMapping(path = "/allTeam")
    // public @ResponseBody Iterable<Team> getAll() {
    //     return teamRepository.findAll();
    // }

    // @GetMapping(path = "/allUser")
    // public @ResponseBody Iterable<User> getAllUser() {
    //     return userRepository.findAll();
    // }

    // @GetMapping(path="/addTeam") // Map ONLY GET Requests
	// public @ResponseBody String addNewTeam (@RequestParam String teamName
	// 		, @RequestParam String teamAbbreviation) {
	// 	// @ResponseBody means the returned String is the response, not a view name
	// 	// @RequestParam means it is a parameter from the GET or POST request
        
    //     Team n= new Team();
    //     n.setName(teamName);
    //     n.setAbbreviation(teamAbbreviation);
    //     teamRepository.save(n);
	// 	return "Saved";
    // }
    
    // @GetMapping(path="/addUser") // Map ONLY GET Requests
	// public @ResponseBody String addNewTeam (@RequestParam String userName) {
	// 	// @ResponseBody means the returned String is the response, not a view name
	// 	// @RequestParam means it is a parameter from the GET or POST request
        
    //     User n= new User();
    //     n.setName(userName);
    //     userRepository.save(n);
	// 	return "Saved";
	// }



}
